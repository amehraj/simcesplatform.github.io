{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Simulation Environment of Complex Energy System (SimCES) Scientific simulation systems receive benefit from a support for distribution as well as the ease of operation and management, but this combination does not realize in earlier systems. Imagine a system where you can distribute the simulation task to multiple components and software platforms over a network but still manage the simulation as if you had a single piece of software. A distributed setup enables you to exploit the functionality of various platforms, combine the work of multiple simulator system developers and run simulation components in parallel if a lot of computational capacity is necessary. Besides, even real-life systems are distributed, so distribution enables you to model the world as it actually is. This increases the credibility of simulation results. The earlier distributed simulation approaches are far from easy. Functional Mock-up Interface (FMI) is widely used but assumes you run all simulation components in one computer. Ad hoc networking has been applied, but this is laborious to deploy and maintain in large systems. Finally, the analysis of simulation results is the ultimate aim of the system. There should be a means to access all of the simulation results, including the intermediate calculations of the simulation components. SimCES (Simulation Environment of Complex Energy System) aims to fulfill these requirements. It does not develop any complex algorithms for you but provides a straightforward yet powerful concept for the management of simulation systems and the communication of simulation components. From here, SimCES is referred to as the platform .","title":"Home"},{"location":"#simulation-environment-of-complex-energy-system-simces","text":"Scientific simulation systems receive benefit from a support for distribution as well as the ease of operation and management, but this combination does not realize in earlier systems. Imagine a system where you can distribute the simulation task to multiple components and software platforms over a network but still manage the simulation as if you had a single piece of software. A distributed setup enables you to exploit the functionality of various platforms, combine the work of multiple simulator system developers and run simulation components in parallel if a lot of computational capacity is necessary. Besides, even real-life systems are distributed, so distribution enables you to model the world as it actually is. This increases the credibility of simulation results. The earlier distributed simulation approaches are far from easy. Functional Mock-up Interface (FMI) is widely used but assumes you run all simulation components in one computer. Ad hoc networking has been applied, but this is laborious to deploy and maintain in large systems. Finally, the analysis of simulation results is the ultimate aim of the system. There should be a means to access all of the simulation results, including the intermediate calculations of the simulation components. SimCES (Simulation Environment of Complex Energy System) aims to fulfill these requirements. It does not develop any complex algorithms for you but provides a straightforward yet powerful concept for the management of simulation systems and the communication of simulation components. From here, SimCES is referred to as the platform .","title":"Simulation Environment of Complex Energy System (SimCES)"},{"location":"core_index/","text":"Core Hello!","title":"Index"},{"location":"core_index/#core","text":"Hello!","title":"Core"},{"location":"core_manual_for_developer/","text":"","title":"Manual for Developer"},{"location":"core_manual_for_user/","text":"","title":"Manual for User"},{"location":"domain_index/","text":"Domain Hello!","title":"Index"},{"location":"domain_index/#domain","text":"Hello!","title":"Domain"},{"location":"features/","text":"Features The platform provides the following features. Loose coupling of components It is easier to manage a complex simulation system if the components only have the dependencies necessary for communication. The platform uses publish-subscribe communication, which decouples systems in \"time, space and synchronisation\" [1]. This means that the components do not interact directly but only via a communication platform. As the result, it is easier to develop and re-configure the setup as needed. Run simulation with single command Once the environment has been set up, it is started with a single command. The platform takes care of starting and stopping the components. Analysis of results The platform provides a logging system that captures all messages sent from a component. After the simulation, you can explore the messages either one by one or by generating time series from individual messages. Add your own components In the platform, the simulation components have a workflow they must implement. To develop your own component, the sole requirement is to implement the required communication interface and follow the workflow. Parametrize your components The platform provides a mechanism to deliver parameters to the components. You specify by yourself what the parameters are and what values these can have. For example, if your system has a storage of electricity or liquid with size as a property, you can simulate how the size affects the overall system. Geographical distribution If needed, you can distribute the simulations geographically. You can connect a simulation component from anywhere in the world via Internet. This enables a joint effort together with project partners as well as the application of a server cluster located in other premises. Principles of messaging The communication in based on a message bus. This is defined as follows: A Message Bus is a combination of a common data model, a common command set, and a messaging infrastructure to allow different systems to communicate through a shared set of interfaces. [2] As the message bus is in place, the components do not interact directly. Instead, when a component has something to say, it publishes a message. Because the bus uses the publish-subscribe paradigm, any other simulation component can subscribe for the messages to receive them. This is implemented with topics . A topic is an arbitrary string that identifies a subject of interest. The string can be, e.g., \"MyRoom.MySensorA.Temperature\" or \"WeatherInfo.CityX\". The topic-based approach realizes loose coupling, because the components do not directly connect to each other. Time and synchronization The simulator components are distributed but should still operate together, which necessitates a mechanism to synchronize time. This is implemented with epochs . An epoch represents a period of simulated time, e.g., today between 12:00 and 12:15 p.m. The length of epoch can be varied depending on the desired resolution of simulation. As epochs always represent simulated time, the duration is different in real time. This depends mainly on how fast the slowest component can simulate. For more information, please see the page Time and synchronization. Managing components in platform or externally The simulation platform exploits virtualization to facilitate the management of components, but this has limitations. Virtualization is suitable for lightweight components that do not require particularly lot of computational power. On the other hand, sometimes a more powerful platform - possibly even a server cluster - is necessary. To enable both easy management and heavy computation, the platform supports two types of components: platform managed and externally managed . For more information, see Platform-managed and externally managed components. Accessing the results During a simulation run, the logging system of the platform stores any messages exchanged between the simulation components. The logging system provides an HTTP API to access the messages. (In technical terms, this API is Restful, although not all HTTP-based technologies are.) Features: View the results with any HTTP client, including a web browser or a custom client View individual messages Build timeseries from multiple messages of the same structure Retrieve data in: JSON (JavaScript Object Notation) CSV (Comma-separated Values; only for timeseries) References [1] Patrick Th. Eugster, Pascal A. Felber, Rachid Guerraoui, and Anne-Marie Kermarrec. 2003. The many faces of publish/subscribe. ACM Comput. Surv. 35, 2 (June 2003), 114\u2013131. DOI:10.1145/857076.857078 [2] Gregor Hohpe and Bobby Woolf, Enterprise Integration Patterns: Message Bus. https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageBus.html","title":"Features"},{"location":"features/#features","text":"The platform provides the following features.","title":"Features"},{"location":"features/#loose-coupling-of-components","text":"It is easier to manage a complex simulation system if the components only have the dependencies necessary for communication. The platform uses publish-subscribe communication, which decouples systems in \"time, space and synchronisation\" [1]. This means that the components do not interact directly but only via a communication platform. As the result, it is easier to develop and re-configure the setup as needed.","title":"Loose coupling of components"},{"location":"features/#run-simulation-with-single-command","text":"Once the environment has been set up, it is started with a single command. The platform takes care of starting and stopping the components.","title":"Run simulation with single command"},{"location":"features/#analysis-of-results","text":"The platform provides a logging system that captures all messages sent from a component. After the simulation, you can explore the messages either one by one or by generating time series from individual messages.","title":"Analysis of results"},{"location":"features/#add-your-own-components","text":"In the platform, the simulation components have a workflow they must implement. To develop your own component, the sole requirement is to implement the required communication interface and follow the workflow.","title":"Add your own components"},{"location":"features/#parametrize-your-components","text":"The platform provides a mechanism to deliver parameters to the components. You specify by yourself what the parameters are and what values these can have. For example, if your system has a storage of electricity or liquid with size as a property, you can simulate how the size affects the overall system.","title":"Parametrize your components"},{"location":"features/#geographical-distribution","text":"If needed, you can distribute the simulations geographically. You can connect a simulation component from anywhere in the world via Internet. This enables a joint effort together with project partners as well as the application of a server cluster located in other premises.","title":"Geographical distribution"},{"location":"features/#principles-of-messaging","text":"The communication in based on a message bus. This is defined as follows: A Message Bus is a combination of a common data model, a common command set, and a messaging infrastructure to allow different systems to communicate through a shared set of interfaces. [2] As the message bus is in place, the components do not interact directly. Instead, when a component has something to say, it publishes a message. Because the bus uses the publish-subscribe paradigm, any other simulation component can subscribe for the messages to receive them. This is implemented with topics . A topic is an arbitrary string that identifies a subject of interest. The string can be, e.g., \"MyRoom.MySensorA.Temperature\" or \"WeatherInfo.CityX\". The topic-based approach realizes loose coupling, because the components do not directly connect to each other.","title":"Principles of messaging"},{"location":"features/#time-and-synchronization","text":"The simulator components are distributed but should still operate together, which necessitates a mechanism to synchronize time. This is implemented with epochs . An epoch represents a period of simulated time, e.g., today between 12:00 and 12:15 p.m. The length of epoch can be varied depending on the desired resolution of simulation. As epochs always represent simulated time, the duration is different in real time. This depends mainly on how fast the slowest component can simulate. For more information, please see the page Time and synchronization.","title":"Time and synchronization"},{"location":"features/#managing-components-in-platform-or-externally","text":"The simulation platform exploits virtualization to facilitate the management of components, but this has limitations. Virtualization is suitable for lightweight components that do not require particularly lot of computational power. On the other hand, sometimes a more powerful platform - possibly even a server cluster - is necessary. To enable both easy management and heavy computation, the platform supports two types of components: platform managed and externally managed . For more information, see Platform-managed and externally managed components.","title":"Managing components in platform or externally"},{"location":"features/#accessing-the-results","text":"During a simulation run, the logging system of the platform stores any messages exchanged between the simulation components. The logging system provides an HTTP API to access the messages. (In technical terms, this API is Restful, although not all HTTP-based technologies are.) Features: View the results with any HTTP client, including a web browser or a custom client View individual messages Build timeseries from multiple messages of the same structure Retrieve data in: JSON (JavaScript Object Notation) CSV (Comma-separated Values; only for timeseries)","title":"Accessing the results"},{"location":"features/#references","text":"[1] Patrick Th. Eugster, Pascal A. Felber, Rachid Guerraoui, and Anne-Marie Kermarrec. 2003. The many faces of publish/subscribe. ACM Comput. Surv. 35, 2 (June 2003), 114\u2013131. DOI:10.1145/857076.857078 [2] Gregor Hohpe and Bobby Woolf, Enterprise Integration Patterns: Message Bus. https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageBus.html","title":"References"},{"location":"getting_started/","text":"Getting started Core and domain The simulation environment has been split to the following parts: Core : the sole platform without any domain-specific features Domain : the domain-specific features built on top of the core i.e., the components of energy system Keywords MUST, SHOULD, MAY, REQUIRED, etc. The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in RFC 2119. See https://tools.ietf.org/html/rfc2119 Start simulating TODO: add links Installation Running a simulation Getting logged data","title":"Getting started"},{"location":"getting_started/#getting-started","text":"","title":"Getting started"},{"location":"getting_started/#core-and-domain","text":"The simulation environment has been split to the following parts: Core : the sole platform without any domain-specific features Domain : the domain-specific features built on top of the core i.e., the components of energy system","title":"Core and domain"},{"location":"getting_started/#keywords-must-should-may-required-etc","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in RFC 2119. See https://tools.ietf.org/html/rfc2119","title":"Keywords MUST, SHOULD, MAY, REQUIRED, etc."},{"location":"getting_started/#start-simulating","text":"TODO: add links Installation Running a simulation Getting logged data","title":"Start simulating"}]}